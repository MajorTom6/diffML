#!/usr/bin/python3

from PyQt5.QtWidgets import QApplication, QFileDialog, QInputDialog, QMainWindow, QMessageBox, QSplitter, QMenu, QAction
from PyQt5.QtGui import QCursor
import sys

from lib.TreeModel import TreeModel
from lib.TreeView import TreeView
from lib.menubar import menubar
from lib.xmllib import matchField, matchOrder
from lib.csvlib import csvSave, csvExport
from lib.editDialog import editDialog
from lib.CONSTANTS import NONE, FIELD, ORDER

class diffML(QMainWindow):
    def __init__(self):
        super().__init__()

        self.frame = QSplitter()
        self.setCentralWidget(self.frame)

        menubar(self) 

        self.View = {}

        self.View['1'] = TreeView(self, '1')
        self.frame.addWidget(self.View['1'])

        self.View['2'] = TreeView(self, '2')
        self.frame.addWidget(self.View['2'])
        self.View['2'].hide()

        self.hasViewTwo = False

        self.Model = {}

        self.Model['1'] = False
        self.Model['2'] = False

        self.colorState = NONE

        self.syncScrolled = False
        self.View['1'].verticalScrollBar().valueChanged.connect(lambda : self.syncScroll('1'))
        self.View['2'].verticalScrollBar().valueChanged.connect(lambda : self.syncScroll('2'))

        self.hidden = []

        self.show()
    
    def rightClickMenu(self, view):
        menu = QMenu()

        hideButton = QAction('&Hide Element', self)
        
        index = False
        if self.Model[view.num]:
            index = self.View[view.num].selectedIndexes()
            hideButton.triggered.connect(lambda : self.View[view.num].setRowHidden(index[0].row(), index[0].parent(), True))
            self.hidden.append({'index' : index, 'view' : view.num})

        if index:
            menu.addAction(hideButton)
        
            editButton = QAction('&Edit Element', self)
            editButton.triggered.connect(lambda : self.editElement(index,view.num))
            menu.addAction(editButton)

            collapseButton = QAction('&Collapse All', self)
            collapseButton.triggered.connect(lambda : view.collapseAll())
            menu.addAction(collapseButton)

            expandButton = QAction('&Expand All', self)
            expandButton.triggered.connect(lambda : view.expandAll())
            menu.addAction(expandButton)

            position = view.viewport().mapFromGlobal(QCursor.pos()) 
            menu.exec_(view.viewport().mapToGlobal(position))
    
    def editElement(self,index,num):
        result = editDialog.getInfo(index)
        if result:
            self.Model[num].setData(index[0], result['tag'], 2)
            self.Model[num].setData(index[1], result['text'], 2)
            self.Model[num].setData(index[2], str(result['attribs']), 2)

    def reveal(self):
        for element in self.hidden:
            self.View[element['view']].setRowHidden(element['index'][0].row(), element['index'][0].parent(), False)

        self.hidden = []
 
    def toggleViewTwo(self):
        if self.hasViewTwo:
            self.View['2'].hide()
        else:
            self.View['2'].show()
        self.hasViewTwo = not self.hasViewTwo
    
    def setColor(self, color):
        self.colorState = color
        if self.Model['1']:
            self.Model['1'].setColor(color)
            self.View['1'].setFocus()
        
        if self.Model['2']:
            self.Model['2'].setColor(color)
            self.View['2'].setFocus()


    def matching(self, n):
        if self.Model['1'] and self.Model['2']: 
            if n == ORDER:
                differences = matchOrder(   self.Model['1'].getXMLTree(),
                                            self.View['1'].selectedIndexes(),
                                            self.Model['2'].getXMLTree(),
                                            self.View['2'].selectedIndexes())
            elif n == FIELD:
                choice = QInputDialog.getItem(self, 'Compare selected by matching fields', 'What field to match with?', ('Tag','Text','Attribute'))
                differences = matchField(   choice[0],
                                            self.Model['1'].getXMLTree(),
                                            self.View['1'].selectedIndexes(),
                                            self.Model['2'].getXMLTree(),
                                            self.View['2'].selectedIndexes())

            self.resultMessage(differences) 
            
    def resultMessage(self, differences):
        MessageBox = QMessageBox()

        parsed = str()

        for difference in differences:
            parsed += difference + '\n'

        MessageBox.setWindowTitle("Result:")

        if len(differences) != 0:
            MessageBox.setStandardButtons(QMessageBox.Save | QMessageBox.Ok)
            MessageBox.setText('There were ' + str(len(differences)) + ' differences.')
            MessageBox.setDetailedText(parsed)
        else:
            MessageBox.setStandardButtons(QMessageBox.Ok)
            MessageBox.setText('There was no differences.')

        result = MessageBox.exec_()

        if result == QMessageBox.Save:
            path = QFileDialog.getSaveFileName(self)
            if path[0] != '':
                csvSave(path[0],differences)

    def save(self):
        if self.Model['1']:
            self.Model['1'].save()
        if self.Model['2']:
            self.Model['2'].save()
        
    def saveAs(self):
        if self.Model['2']:
            choice = QInputDialog.getItem(self, 'Save As', 'Workspace:', ("1","2"))
            path = QFileDialog.getSaveFileName(self)
            if path[0] != '':
                self.Model[choice[0]].save(path[0])

        elif self.Model['1']:
                path = QFileDialog.getSaveFileName(self)
                if path[0] != '':
                    self.Model['1'].save(path[0])
    
    def open(self):
        path = QFileDialog.getOpenFileName(self)
        if path[0]:
            model = TreeModel(path[0])
            if self.hasViewTwo:
                choice = QInputDialog.getItem(self, 'Open', 'Workspace:', ("1","2"))
                self.Model[choice[0]] = model
                self.View[choice[0]].setModel(model)

            else:
                self.Model['1'] = model
                self.View['1'].setModel(model)

        self.setColor(self.colorState)

    def export(self):
        if self.Model['2']:
            choice = QInputDialog.getItem(self, 'Export', 'Workspace:', ("1","2"))
            path = QFileDialog.getSaveFileName(self)
            if path[0] != '':
                csvExport(path[0], self.Model[choice[0]].getXMLTree())

        elif self.Model['1']:
            path = QFileDialog.getSaveFileName(self)
            if path[0] != '':
                csvExport(path[0], self.Model['1'].getXMLTree())


    def toggleSync(self):
        self.syncScrolled = not self.syncScrolled

    def syncScroll(self, num):
        if self.syncScrolled:
            if num == 1:
                sliderValue = self.View['1'].verticalScrollBar().value()
                self.View['2'].verticalScrollBar().setValue(sliderValue)
            elif num == 2:
                sliderValue = self.View['2'].verticalScrollBar().value()
                self.View['1'].verticalScrollBar().setValue(sliderValue)

app = QApplication(sys.argv)

masterView = diffML()

sys.exit(app.exec_())
