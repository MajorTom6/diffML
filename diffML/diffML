#!/usr/bin/python3

from PyQt5.QtWidgets import QApplication, QFileDialog, QInputDialog, QMainWindow, QMessageBox, QSplitter, QMenu, QAction
from PyQt5.QtGui import QCursor
import sys

from pprint import pprint
from lib.TreeModel import TreeModel
from lib.TreeView import TreeView
from lib.menubar import menubar
from lib.xmllib import compareXML
from lib.csvlib import csvSave
from lib.CONSTANTS import NONE

class diffML(QMainWindow):
    def __init__(self):
        super().__init__()

        self.frame = QSplitter()
        self.setCentralWidget(self.frame)

        menubar(self) 

        self.XMLViewOne = TreeView(self, 1)
        self.frame.addWidget(self.XMLViewOne)

        self.XMLViewTwo = TreeView(self, 2)
        self.frame.addWidget(self.XMLViewTwo)
        self.XMLViewTwo.hide()
        self.hasViewTwo = False

        self.XMLModelOne = False
        self.XMLModelTwo = False

        self.colorState = NONE

        self.hidden = []

        self.show()
    
    def rightClickMenu(self, view):
        menu = QMenu()

        hideButton = QAction('&Hide element', self)

        if view.num == 1:
            index = self.XMLViewOne.selectedIndexes()[0]
            self.hidden.append({'index' : index, 'view' : 1})
            hideButton.triggered.connect(lambda : self.XMLViewOne.setRowHidden(index.row(), index.parent(), True))
        else:
            index = self.XMLViewTwo.selectedIndexes()[0]
            self.hidden.append({'index' : index, 'view' : 2})
            hideButton.triggered.connect(lambda : self.XMLViewTwo.setRowHidden(index.row(), index.parent(), True))

        menu.addAction(hideButton)

        collapseButton = QAction('&Collapse All', self)
        collapseButton.triggered.connect(lambda : view.collapseAll())
        menu.addAction(collapseButton)

        expandButton = QAction('&Expand All', self)
        expandButton.triggered.connect(lambda : view.expandAll())
        menu.addAction(expandButton)

        position = view.viewport().mapFromGlobal(QCursor.pos()) 
        menu.exec_(view.viewport().mapToGlobal(position))

    def reveal(self):
        for element in self.hidden:
            if element['view'] == 1:
                self.XMLViewOne.setRowHidden(element['index'].row(), element['index'].parent(), False)
            else:
                self.XMLViewTwo.setRowHidden(element['index'].row(), element['index'].parent(), False)

        self.hidden = []
 
    def toggleViewTwo(self):
        if  self.hasViewTwo:
            self.hasViewTwo = False
            self.XMLViewTwo.hide()
        else:
            self.hasViewTwo = True
            self.XMLViewTwo.show()
    
    def setColor(self, color):
        self.colorState = color
        if self.XMLModelOne:
            self.XMLModelOne.setColor(color)
            self.XMLViewOne.setFocus()
        if self.XMLModelTwo:
            self.XMLModelTwo.setColor(color)
            self.XMLViewTwo.setFocus()
    
    def compare(self):
        if self.XMLModelOne:
            choice = QInputDialog.getItem(self, 'Compare Selected Elements Children', 'What to match with?', ("Tag","Text","Attribute"))
            selectedOne = self.XMLViewOne.selectedIndexes()
        if self.XMLModelTwo:
            selectedTwo = self.XMLViewTwo.selectedIndexes()
            differences = compareXML(   choice[0],
                                        self.XMLModelOne.getXMLTree(),
                                        selectedOne,
                                        self.XMLModelTwo.getXMLTree(),
                                        selectedTwo)

            MessageBox = QMessageBox()

            parsed = str()

            for difference in differences:
                parsed += difference + '\n'

            MessageBox.setWindowTitle("Result:")

            if len(differences) != 0:
                MessageBox.setStandardButtons(QMessageBox.Save | QMessageBox.Ok)
                MessageBox.setText('There were ' + str(len(differences)) + ' differences.')
                MessageBox.setDetailedText(parsed)
            else:
                MessageBox.setStandardButtons(QMessageBox.Ok)
                MessageBox.setText('There was no differences.')

            result = MessageBox.exec_()

            if result == QMessageBox.Save:
                path = QFileDialog.getSaveFileName(self)
                if path[0] != '':
                    csvSave(path[0],differences)

    def save(self):
        if self.XMLModelOne:
            self.XMLModelOne.save()
        if self.XMLModelTwo:
            self.XMLModelTwo.save()
        
    def saveAs(self):
        if self.XMLModelTwo:
            choice = QInputDialog.getItem(self, 'Save As', 'Workspace:', ("1","2"))
            path = QFileDialog.getSaveFileName(self)
            if path[0] != '':
                if choice[0] == "1":
                        self.XMLModelOne.save(path[0])
                if choice[0] == "2":
                        self.XMLModelTwo.save(path[0])
        else:
            if self.XMLModelOne:
                path = QFileDialog.getSaveFileName(self)
                if path[0] != '':
                    self.XMLModelOne.save(path[0])
    
    def open(self):
        path = QFileDialog.getOpenFileName(self)
        if path[0]:
            model = TreeModel(path[0])
            if self.hasViewTwo:
                choice = QInputDialog.getItem(self, 'Open', 'Workspace:', ("1","2","Both"))
                if choice[0] == "1":
                    self.XMLModelOne = model
                    self.XMLViewOne.setModel(model)

                elif choice[0] == "2":
                    self.XMLModelTwo = model
                    self.XMLViewTwo.setModel(model)

                else:
                    self.XMLModelOne = model
                    self.XMLViewOne.setModel(model)
                    
                    model = TreeModel(path[0])
                    self.XMLModelTwo = model
                    self.XMLViewTwo.setModel(model)
                

            else:
                self.XMLModelOne = model
                self.XMLViewOne.setModel(model)

        self.setColor(self.colorState)


app = QApplication(sys.argv)

masterView = diffML()

sys.exit(app.exec_())
