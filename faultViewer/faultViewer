#!/usr/bin/python3

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QTreeWidget, QGridLayout, QAction, QFileDialog, QTreeWidgetItem
import xml.etree.ElementTree as ET
import csv
import sys

class faultViewer(QMainWindow):
    def __init__(self):

        super().__init__()

        menu = self.menuBar()
        fileMenu = menu.addMenu('&File')
        openButton = QAction('&Open', self)
        openButton.triggered.connect(self.open)
        fileMenu.addAction(openButton)

        exportButton = QAction('&Export CSV', self)
        exportButton.triggered.connect(self.export)
        fileMenu.addAction(exportButton)

        viewMenu = menu.addMenu('&View')
        self.hideButton = QAction('&Hide Generated', self)
        self.hideButton.setEnabled(False)
        self.hideButton.setCheckable(True)
        self.hideButton.setChecked(False)
        self.hideButton.triggered.connect(self.hide)
        viewMenu.addAction(self.hideButton)

        self.highlightButton = QAction('&Highlight Duplicates', self)
        self.highlightButton.setEnabled(False)
        self.highlightButton.setCheckable(True)
        self.highlightButton.setChecked(False)
        self.highlightButton.triggered.connect(self.highlight)
        viewMenu.addAction(self.highlightButton)

        self.fixButton = QAction('&Fix first 100 (use with care)', self)
        self.fixButton.setEnabled(False)
        self.fixButton.triggered.connect(self.fix)
        viewMenu.addAction(self.fixButton)

        self.list = QTreeWidget()
        self.list.setAlternatingRowColors(True)
        self.list.setHeaderLabels(['Fault Number','Catagory','Text'])

        self.setCentralWidget(self.list)

        if len(sys.argv) == 2:
            self.open(sys.argv[1])

        self.show()

    def export(self):
        path = QFileDialog.getSaveFileName(self)
        if path[0]:
            with open(path[0]+'.csv', 'w', newline = '') as csvFile:
                writer = csv.writer(csvFile)
                for d in self.data:
                    writer.writerow(d)

    def hide(self):
        if not self.hideButton.isChecked():
            root = self.list.invisibleRootItem()
            count = root.childCount()
            for i in range(count):
                child = root.child(i)
                if child.text(0) == child.text(2):
                    child.setHidden(False)
            self.hideButton.setChecked(False)
        else:
            root = self.list.invisibleRootItem()
            count = root.childCount()
            for i in range(count):
                child = root.child(i)
                if child.text(0) == child.text(2):
                    child.setHidden(True)
            self.hideButton.setChecked(True)

    def highlight(self):
        if not self.highlightButton.isChecked():
            root = self.list.invisibleRootItem()
            count = root.childCount()

            tmp = [x[0] for x in self.data]
            for i in range(count):
                child = root.child(i)
                child.setBackground(0, Qt.white)

            self.highlightButton.setChecked(False)
        else:
            root = self.list.invisibleRootItem()
            count = root.childCount()
            tmp = [x[0] for x in self.data]
            for i in range(count):
                child = root.child(i)
                if tmp.count(child.text(0)) != 1:
                    child.setBackground(0, Qt.red)

            self.highlightButton.setChecked(True)

    def open(self, f = None):
        if not f:
            path = QFileDialog.getOpenFileName(self)[0]
        else:
            path = f

        if path:
            XMLTree = ET.parse(path)
            root = XMLTree.getroot()

            self.data = []

            for program in root.iter("Program"):
                for rung in program.iter("Rung"):
                    textElement = str(rung.findall("Text")[0].text)
                    f = textElement.find("AOI_Fault_Set_Reset")

                    tmp = []

                    if f != -1:
                        commentElement = rung.findall("Comment")
                        if commentElement:
                            commentElement = commentElement[0].text

                        textElement = textElement[f:]
                        p = textElement.find(')')
                        textElement = textElement[:p].split(',')[2:4]
                        tmp.append(textElement[0])
                        tmp.append(textElement[1])

                        if commentElement:
                            commentElement = commentElement.split('\n')[2]
                            if len(commentElement.split(':')) == 2:
                                commentElement = commentElement.split(':')[1]
                            elif len(commentElement.split(':')) == 3:
                                commentElement = commentElement.split(':')[1] + commentElement.split(':')[2]
                            
                            name = program.attrib['Name'].split("_")[1]
                            mtn = name[:3]
                            stn = name[3:]
                            #if stn == "":
                            #    stn = "G3"
                            if mtn[0] == '5':
                                loop = "07"
                            elif mtn[0] == '6':
                                loop = "08"
                            elif mtn[0] == '7':
                                loop = "09"
                            else:
                                loop = "10"

                            tmp.append(loop + mtn + "_" + stn + ":" + commentElement)
                        else:
                            tmp.append("")

                        self.data.append(tmp)


            for i in range(len(self.data)):
                    self.data[i][0] = int(self.data[i][0])

            self.data = sorted(self.data, key=lambda x:x[0])

            for i in range(1000):
                if len(self.data) <= i:
                    self.data.append([i, "", ""])
                elif self.data[i][0] != i:
                    if self.data[i][0] == i - 1:
                        i -= 1
                        continue
                    self.data.insert(i, [i, "", ""])

            for i in range(len(self.data)):
                    self.data[i][0] = int(self.data[i][0])

            self.data = sorted(self.data, key=lambda x:x[0])
                
            for i in range(len(self.data)):
                if self.data[i][1].find("Warning") != -1:
                    self.data[i][1] = "M"
                if self.data[i][1].find("Stop") != -1:
                    self.data[i][1] = "C"
                if self.data[i][1].find("Abort") != -1:
                    self.data[i][1] = "I"

            for i in range(len(self.data)):
                n = str(self.data[i][0])
                if len(n) == 1:
                    self.data[i][0] = "Fault_00" + n
                if len(n) == 2:
                    self.data[i][0] = "Fault_0" + n
                if len(n) == 3:
                    self.data[i][0] = "Fault_" + n
                if self.data[i][2] == "":
                    self.data[i][2] = self.data[i][0]

            for d in self.data:
                item = QTreeWidgetItem(self.list)
                item.setText(0, d[0])
                item.setText(1, d[1])
                if len(d) == 3:
                    item.setText(2, d[2])

            self.hideButton.setEnabled(True)
            self.highlightButton.setEnabled(True)
            self.fixButton.setEnabled(True)

    def fix(self):
        self.list.clear()

        self.quickEdit()

        for d in self.data:
            item = QTreeWidgetItem(self.list)
            item.setText(0, d[0])
            item.setText(1, d[1])
            if len(d) == 3:
                item.setText(2, d[2])
        
            self.highlightButton.setChecked(False)
            self.hideButton.setChecked(False)

    def quickEdit(self):
        for i in range(100):
            tmp = self.data[i][2]
            if tmp.find("Consecutive Faults are switched off") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "G3_G001" + tmp[tmp.find(":"):]
            elif tmp.find("test via HMI") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "G3_G001" + tmp[tmp.find(":"):]
            elif tmp.find("Boot") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K001" + tmp[tmp.find(":"):]
            elif tmp.find("Motion") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K001: Boot Cycle Group NOT finished"
            elif tmp.find("any minor") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K001: PLC Minor Fault"
            elif tmp.find("in CPU installed") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K001: PLC Forces Installed"
            elif tmp.find("in CPU active") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K001: PLC Forces Active"
            elif tmp.find("Task overlap") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K001: PLC Task Overrun"
            elif tmp.find("Abort Stop") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_S003" + tmp[tmp.find(":"):]
            elif tmp.find("Stop button") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_S003" + tmp[tmp.find(":"):]
            elif tmp.find("Temperature too high") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_S001" + tmp[tmp.find(":"):]
            elif tmp.find("B001PS Main Air not present") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_B003: Main Air Pressure not present"
            elif tmp.find("Main Air generic") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_M002/3: Fault Main Air Valve"
            elif tmp.find("B001PS Main Air still present") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_B003: Main Air Pressure not dropped"
            elif tmp.find("Safety is not ok") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K625: Safety NOT ok"
            elif tmp.find("Safety diagnosis present") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K625: Safety Diagnosis present -> check diagnostic screen"
            elif tmp.find("Emergency stop activated") != -1:
                self.data[i][2] = tmp[:tmp.find(":")-2] + "G5_S625" + tmp[tmp.find(":"):]
            elif tmp.find("Emergency stop Operator Panel") != -1:
                self.data[i][2] = tmp[:tmp.find(":")-2] + "G4_S004" + tmp[tmp.find(":"):]
            elif tmp.find("Fault messages for guard doors") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K625: Guard opened"
            elif tmp.find("At least one fuse in ") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_FXXX" + tmp[tmp.find(":"):]
            elif tmp.find("At least one motor protection") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_FXXX" + tmp[tmp.find(":"):]
            elif tmp.find("No communication to") != -1:
                self.data[i][2] = tmp[:tmp.find(":")-2] + "G3_K001" + tmp[tmp.find(":"):]
            elif tmp.find("Stratix") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K060" + tmp[tmp.find(":"):]
            elif tmp.find("Cube 67") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K090" + tmp[tmp.find(":"):]
            elif tmp.find("Point I/O") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K020" + tmp[tmp.find(":"):]
            elif tmp.find("CPX") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "_K070" + tmp[tmp.find(":"):]
            elif tmp.find("purging activated") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "G3_K001: Purge Active"
            elif tmp.find("Reject activated") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "G3_K001: Purge Over Reject Active"
            elif tmp.find("Machine is empty and no ") != -1:
                self.data[i][2] = tmp[:tmp.find(":")] + "G3_K001" + tmp[tmp.find(":"):]
            else:
                ntmp = self.data[40][2]
                if tmp.find("041") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B001: Guard Door 1 opened"
                elif tmp.find("042") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B002: Guard Door 2 opened"
                elif tmp.find("043") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B003: Guard Door 3 opened"
                elif tmp.find("041") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B004: Guard Door 4 opened"
                elif tmp.find("044") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B005: Guard Door 5 opened"
                elif tmp.find("045") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B006: Guard Door 6 opened"
                elif tmp.find("046") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B007: Guard Door 7 opened"
                elif tmp.find("047") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B008: Guard Door 8 opened"
                elif tmp.find("047") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B008: Guard Door 8 opened"
                elif tmp.find("048") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B009: Protective Flap Infeed opened"
                elif tmp.find("049") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B010: Protective Flap Outfeed opened"
                elif tmp.find("050") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B011: Safety Switch 1 Machine Room opened"
                elif tmp.find("051") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B012: Safety Switch 2 Machine Room opened"
                elif tmp.find("052") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B013: Safety Switch 3 Machine Room opened"
                elif tmp.find("053") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B014: Safety Switch 4 Machine Room opened"
                elif tmp.find("053") != -1:
                    self.data[i][2] = ntmp[:ntmp.find(":")-5] + "_B014: Safety Switch 4 Machine Room opened"

app = QApplication(sys.argv)

masterView = faultViewer()

sys.exit(app.exec_())
